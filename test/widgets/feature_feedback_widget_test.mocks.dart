// Mocks generated by Mockito 5.4.5 from annotations
// in flutter_firebase_feature_feedback/test/widgets/feature_feedback_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:flutter_firebase_feature_feedback/src/models/feature_request.dart'
    as _i3;
import 'package:flutter_firebase_feature_feedback/src/providers/feature_feedback_provider.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FeatureFeedbackProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeatureFeedbackProvider extends _i1.Mock
    implements _i2.FeatureFeedbackProvider {
  MockFeatureFeedbackProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.FeatureRequest> get featureRequests =>
      (super.noSuchMethod(
            Invocation.getter(#featureRequests),
            returnValue: <_i3.FeatureRequest>[],
          )
          as List<_i3.FeatureRequest>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> addFeatureRequest({
    required String? title,
    required String? description,
    required String? userId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addFeatureRequest, [], {
              #title: title,
              #description: description,
              #userId: userId,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateVote({
    required String? featureId,
    required String? userId,
    required bool? isUpvote,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateVote, [], {
              #featureId: featureId,
              #userId: userId,
              #isUpvote: isUpvote,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateStatus({
    required String? featureId,
    required String? status,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#updateStatus, [], {
              #featureId: featureId,
              #status: status,
            }),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteFeatureRequest(String? featureId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteFeatureRequest, [featureId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void loadFeatureRequests() => super.noSuchMethod(
    Invocation.method(#loadFeatureRequests, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
